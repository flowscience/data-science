{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNUuzfhNNUMneYUMdr9IRwO"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":7,"metadata":{"id":"RLB9j7wP8BJ_","colab":{"base_uri":"https://localhost:8080/","height":245},"executionInfo":{"status":"error","timestamp":1701158366848,"user_tz":480,"elapsed":251,"user":{"displayName":"Elijah Spina","userId":"09538733801989465977"}},"outputId":"2e73178f-29d8-40eb-8333-9e0a3cb9b566"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-3c5b9948f8e6>\u001b[0m in \u001b[0;36m<cell line: 21>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0msys\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcwd\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;31m# NFT holder email addresses, tab-separated one per line\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'cwd' is not defined"]}],"source":["#-------------------------------------------------------------------------------\n","# Name:        verifyreferrals.py\n","# Purpose:     This script counts the number of referrals a Sparkloop export for each referrer,\n","#              It then counts how many referrees purchased an NFT by checking their\n","#              email addresses against a known list, and outputs verified referral counts.\n","#\n","# Author:      Elijah Spina\n","#\n","# Created:     11/26/2023\n","# Copyright:   Elijah Spina\n","# Licence:     MIT v2\n","#-------------------------------------------------------------------------------\n","\n","def main():\n","    pass\n","\n","if __name__ == '__main__':\n","    main()\n","\n","import sys\n","\n","\n","# NFT holder email addresses, tab-separated one per line\n","ids = open(\"https://drive.google.com/file/d/1qjK6ixF66mQIRIQa1wvZZtANCqQyaKPM/view?usp=sharing\", \"r\")\n","\n","# Take header from ID file & initialize empty list\n","head_ids = ids.readline().strip(\"\\n\")\n","emails = []\n","\n","# Populate list of ID's\n","for line in ids:\n","    #remove extraneous characters\n","    email = line.strip('\\n').split('\\t')[1] #get email address from 2nd column\n","\n","    # only keep unique email addresses\n","    if email in emails:\n","            continue\n","    else:\n","        emails.append(email)\n","\n","ids.close\n","print('Unique NFT holder email addresses:', len(idlist1))\n","\n","# Data Header: Subscriber ID,Created At,Name,Email,Referral Code,Referral Traffic,Referral link,Referrals,Referral Revenue,Spend,Referred,Referrer,Source,Campaign,IP Address,Country\n","data = open(\"C:/.txt\", \"r\")\n","\n","# Create data structure: {referrer: [[referree, date, ip], [referree, date, ip]], referrer: [[...], [...]], ...}\n","referralDict = {}\n","for line in data:\n","\n","    # Prefilter data to only include referrals in desired date range\n","    reffered = line.strip('\\n').split('\\t')[10].strip('\"') #column K\n","    if referred == \"TRUE\":\n","        referrer = line.strip('\\n').split('\\t')[11].strip('\"') #column L\n","        referree = line.strip('\\n').split('\\t')[3].strip('\"') #column D\n","        ip = line.strip('\\n').split('\\t')[14].strip('\"') #column O\n","        values = [referree, date, ip]\n","    else:\n","        continue\n","\n","    # add to dict\n","    if referrer in referralDict:\n","        if referree in referralDict[referrer]:\n","            continue #skip if duplicate\n","        else:\n","            referralDict[referrer].append(values)\n","    else:\n","        referralDict[referrer] = [values]\n","\n","print(\"Referrers:\", len(referralDict))\n","print(\"Referree counts by referrer:\")\n","for referrer in referralDict:\n","    print(referrer, count(referralDict[referrer]))\n","\n","# cross check input and output lists to create referrer:verified referrals\n","verified = {}\n","\n","for referrer in referralDict:\n","    count = 0\n","    if referrer in verified:\n","        continue\n","    else:\n","        for referree in referralDict[referrer]:\n","            if referralDict[referrer][0] in emails:\n","                count = count+1\n","            else:\n","                pass\n","            verified[referrer].append(count)\n","\n","print(\"Verified referree counts by referrer:\")\n","for referrer in verified:\n","    print(eferrer, verified[referrer])"]}]}